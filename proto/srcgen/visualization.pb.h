// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: visualization.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_visualization_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_visualization_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_visualization_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_visualization_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_visualization_2eproto;
namespace utils {
namespace visualization {
class proto_visualizer;
struct proto_visualizerDefaultTypeInternal;
extern proto_visualizerDefaultTypeInternal _proto_visualizer_default_instance_;
class proto_visualizer_Coordinates;
struct proto_visualizer_CoordinatesDefaultTypeInternal;
extern proto_visualizer_CoordinatesDefaultTypeInternal _proto_visualizer_Coordinates_default_instance_;
class proto_visualizer_Features;
struct proto_visualizer_FeaturesDefaultTypeInternal;
extern proto_visualizer_FeaturesDefaultTypeInternal _proto_visualizer_Features_default_instance_;
class proto_visualizer_Features_PropertiesEntry_DoNotUse;
struct proto_visualizer_Features_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern proto_visualizer_Features_PropertiesEntry_DoNotUseDefaultTypeInternal _proto_visualizer_Features_PropertiesEntry_DoNotUse_default_instance_;
class proto_visualizer_Geometry;
struct proto_visualizer_GeometryDefaultTypeInternal;
extern proto_visualizer_GeometryDefaultTypeInternal _proto_visualizer_Geometry_default_instance_;
}  // namespace visualization
}  // namespace utils
PROTOBUF_NAMESPACE_OPEN
template<> ::utils::visualization::proto_visualizer* Arena::CreateMaybeMessage<::utils::visualization::proto_visualizer>(Arena*);
template<> ::utils::visualization::proto_visualizer_Coordinates* Arena::CreateMaybeMessage<::utils::visualization::proto_visualizer_Coordinates>(Arena*);
template<> ::utils::visualization::proto_visualizer_Features* Arena::CreateMaybeMessage<::utils::visualization::proto_visualizer_Features>(Arena*);
template<> ::utils::visualization::proto_visualizer_Features_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::utils::visualization::proto_visualizer_Features_PropertiesEntry_DoNotUse>(Arena*);
template<> ::utils::visualization::proto_visualizer_Geometry* Arena::CreateMaybeMessage<::utils::visualization::proto_visualizer_Geometry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace utils {
namespace visualization {

// ===================================================================

class proto_visualizer_Coordinates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:utils.visualization.proto_visualizer.Coordinates) */ {
 public:
  inline proto_visualizer_Coordinates() : proto_visualizer_Coordinates(nullptr) {}
  ~proto_visualizer_Coordinates() override;
  explicit constexpr proto_visualizer_Coordinates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  proto_visualizer_Coordinates(const proto_visualizer_Coordinates& from);
  proto_visualizer_Coordinates(proto_visualizer_Coordinates&& from) noexcept
    : proto_visualizer_Coordinates() {
    *this = ::std::move(from);
  }

  inline proto_visualizer_Coordinates& operator=(const proto_visualizer_Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline proto_visualizer_Coordinates& operator=(proto_visualizer_Coordinates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const proto_visualizer_Coordinates& default_instance() {
    return *internal_default_instance();
  }
  static inline const proto_visualizer_Coordinates* internal_default_instance() {
    return reinterpret_cast<const proto_visualizer_Coordinates*>(
               &_proto_visualizer_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(proto_visualizer_Coordinates& a, proto_visualizer_Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(proto_visualizer_Coordinates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(proto_visualizer_Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  proto_visualizer_Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<proto_visualizer_Coordinates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const proto_visualizer_Coordinates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const proto_visualizer_Coordinates& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proto_visualizer_Coordinates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "utils.visualization.proto_visualizer.Coordinates";
  }
  protected:
  explicit proto_visualizer_Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInternalCordinatesFieldNumber = 1,
  };
  // repeated double internal_cordinates = 1 [packed = true];
  int internal_cordinates_size() const;
  private:
  int _internal_internal_cordinates_size() const;
  public:
  void clear_internal_cordinates();
  private:
  double _internal_internal_cordinates(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_internal_cordinates() const;
  void _internal_add_internal_cordinates(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_internal_cordinates();
  public:
  double internal_cordinates(int index) const;
  void set_internal_cordinates(int index, double value);
  void add_internal_cordinates(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      internal_cordinates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_internal_cordinates();

  // @@protoc_insertion_point(class_scope:utils.visualization.proto_visualizer.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > internal_cordinates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_visualization_2eproto;
};
// -------------------------------------------------------------------

class proto_visualizer_Geometry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:utils.visualization.proto_visualizer.Geometry) */ {
 public:
  inline proto_visualizer_Geometry() : proto_visualizer_Geometry(nullptr) {}
  ~proto_visualizer_Geometry() override;
  explicit constexpr proto_visualizer_Geometry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  proto_visualizer_Geometry(const proto_visualizer_Geometry& from);
  proto_visualizer_Geometry(proto_visualizer_Geometry&& from) noexcept
    : proto_visualizer_Geometry() {
    *this = ::std::move(from);
  }

  inline proto_visualizer_Geometry& operator=(const proto_visualizer_Geometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline proto_visualizer_Geometry& operator=(proto_visualizer_Geometry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const proto_visualizer_Geometry& default_instance() {
    return *internal_default_instance();
  }
  static inline const proto_visualizer_Geometry* internal_default_instance() {
    return reinterpret_cast<const proto_visualizer_Geometry*>(
               &_proto_visualizer_Geometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(proto_visualizer_Geometry& a, proto_visualizer_Geometry& b) {
    a.Swap(&b);
  }
  inline void Swap(proto_visualizer_Geometry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(proto_visualizer_Geometry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  proto_visualizer_Geometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<proto_visualizer_Geometry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const proto_visualizer_Geometry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const proto_visualizer_Geometry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proto_visualizer_Geometry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "utils.visualization.proto_visualizer.Geometry";
  }
  protected:
  explicit proto_visualizer_Geometry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinatesFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .utils.visualization.proto_visualizer.Coordinates coordinates = 1;
  int coordinates_size() const;
  private:
  int _internal_coordinates_size() const;
  public:
  void clear_coordinates();
  ::utils::visualization::proto_visualizer_Coordinates* mutable_coordinates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::utils::visualization::proto_visualizer_Coordinates >*
      mutable_coordinates();
  private:
  const ::utils::visualization::proto_visualizer_Coordinates& _internal_coordinates(int index) const;
  ::utils::visualization::proto_visualizer_Coordinates* _internal_add_coordinates();
  public:
  const ::utils::visualization::proto_visualizer_Coordinates& coordinates(int index) const;
  ::utils::visualization::proto_visualizer_Coordinates* add_coordinates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::utils::visualization::proto_visualizer_Coordinates >&
      coordinates() const;

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:utils.visualization.proto_visualizer.Geometry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::utils::visualization::proto_visualizer_Coordinates > coordinates_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_visualization_2eproto;
};
// -------------------------------------------------------------------

class proto_visualizer_Features_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<proto_visualizer_Features_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<proto_visualizer_Features_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  proto_visualizer_Features_PropertiesEntry_DoNotUse();
  explicit constexpr proto_visualizer_Features_PropertiesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit proto_visualizer_Features_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const proto_visualizer_Features_PropertiesEntry_DoNotUse& other);
  static const proto_visualizer_Features_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const proto_visualizer_Features_PropertiesEntry_DoNotUse*>(&_proto_visualizer_Features_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "utils.visualization.proto_visualizer.Features.PropertiesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "utils.visualization.proto_visualizer.Features.PropertiesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class proto_visualizer_Features final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:utils.visualization.proto_visualizer.Features) */ {
 public:
  inline proto_visualizer_Features() : proto_visualizer_Features(nullptr) {}
  ~proto_visualizer_Features() override;
  explicit constexpr proto_visualizer_Features(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  proto_visualizer_Features(const proto_visualizer_Features& from);
  proto_visualizer_Features(proto_visualizer_Features&& from) noexcept
    : proto_visualizer_Features() {
    *this = ::std::move(from);
  }

  inline proto_visualizer_Features& operator=(const proto_visualizer_Features& from) {
    CopyFrom(from);
    return *this;
  }
  inline proto_visualizer_Features& operator=(proto_visualizer_Features&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const proto_visualizer_Features& default_instance() {
    return *internal_default_instance();
  }
  static inline const proto_visualizer_Features* internal_default_instance() {
    return reinterpret_cast<const proto_visualizer_Features*>(
               &_proto_visualizer_Features_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(proto_visualizer_Features& a, proto_visualizer_Features& b) {
    a.Swap(&b);
  }
  inline void Swap(proto_visualizer_Features* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(proto_visualizer_Features* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  proto_visualizer_Features* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<proto_visualizer_Features>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const proto_visualizer_Features& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const proto_visualizer_Features& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proto_visualizer_Features* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "utils.visualization.proto_visualizer.Features";
  }
  protected:
  explicit proto_visualizer_Features(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 3,
    kTypeFieldNumber = 2,
    kGeometryFieldNumber = 1,
  };
  // map<string, string> properties = 3;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_properties();

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .utils.visualization.proto_visualizer.Geometry geometry = 1;
  bool has_geometry() const;
  private:
  bool _internal_has_geometry() const;
  public:
  void clear_geometry();
  const ::utils::visualization::proto_visualizer_Geometry& geometry() const;
  PROTOBUF_NODISCARD ::utils::visualization::proto_visualizer_Geometry* release_geometry();
  ::utils::visualization::proto_visualizer_Geometry* mutable_geometry();
  void set_allocated_geometry(::utils::visualization::proto_visualizer_Geometry* geometry);
  private:
  const ::utils::visualization::proto_visualizer_Geometry& _internal_geometry() const;
  ::utils::visualization::proto_visualizer_Geometry* _internal_mutable_geometry();
  public:
  void unsafe_arena_set_allocated_geometry(
      ::utils::visualization::proto_visualizer_Geometry* geometry);
  ::utils::visualization::proto_visualizer_Geometry* unsafe_arena_release_geometry();

  // @@protoc_insertion_point(class_scope:utils.visualization.proto_visualizer.Features)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      proto_visualizer_Features_PropertiesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::utils::visualization::proto_visualizer_Geometry* geometry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_visualization_2eproto;
};
// -------------------------------------------------------------------

class proto_visualizer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:utils.visualization.proto_visualizer) */ {
 public:
  inline proto_visualizer() : proto_visualizer(nullptr) {}
  ~proto_visualizer() override;
  explicit constexpr proto_visualizer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  proto_visualizer(const proto_visualizer& from);
  proto_visualizer(proto_visualizer&& from) noexcept
    : proto_visualizer() {
    *this = ::std::move(from);
  }

  inline proto_visualizer& operator=(const proto_visualizer& from) {
    CopyFrom(from);
    return *this;
  }
  inline proto_visualizer& operator=(proto_visualizer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const proto_visualizer& default_instance() {
    return *internal_default_instance();
  }
  static inline const proto_visualizer* internal_default_instance() {
    return reinterpret_cast<const proto_visualizer*>(
               &_proto_visualizer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(proto_visualizer& a, proto_visualizer& b) {
    a.Swap(&b);
  }
  inline void Swap(proto_visualizer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(proto_visualizer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  proto_visualizer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<proto_visualizer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const proto_visualizer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const proto_visualizer& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(proto_visualizer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "utils.visualization.proto_visualizer";
  }
  protected:
  explicit proto_visualizer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef proto_visualizer_Coordinates Coordinates;
  typedef proto_visualizer_Geometry Geometry;
  typedef proto_visualizer_Features Features;

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated .utils.visualization.proto_visualizer.Features features = 2;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  ::utils::visualization::proto_visualizer_Features* mutable_features(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::utils::visualization::proto_visualizer_Features >*
      mutable_features();
  private:
  const ::utils::visualization::proto_visualizer_Features& _internal_features(int index) const;
  ::utils::visualization::proto_visualizer_Features* _internal_add_features();
  public:
  const ::utils::visualization::proto_visualizer_Features& features(int index) const;
  ::utils::visualization::proto_visualizer_Features* add_features();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::utils::visualization::proto_visualizer_Features >&
      features() const;

  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:utils.visualization.proto_visualizer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::utils::visualization::proto_visualizer_Features > features_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_visualization_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// proto_visualizer_Coordinates

// repeated double internal_cordinates = 1 [packed = true];
inline int proto_visualizer_Coordinates::_internal_internal_cordinates_size() const {
  return internal_cordinates_.size();
}
inline int proto_visualizer_Coordinates::internal_cordinates_size() const {
  return _internal_internal_cordinates_size();
}
inline void proto_visualizer_Coordinates::clear_internal_cordinates() {
  internal_cordinates_.Clear();
}
inline double proto_visualizer_Coordinates::_internal_internal_cordinates(int index) const {
  return internal_cordinates_.Get(index);
}
inline double proto_visualizer_Coordinates::internal_cordinates(int index) const {
  // @@protoc_insertion_point(field_get:utils.visualization.proto_visualizer.Coordinates.internal_cordinates)
  return _internal_internal_cordinates(index);
}
inline void proto_visualizer_Coordinates::set_internal_cordinates(int index, double value) {
  internal_cordinates_.Set(index, value);
  // @@protoc_insertion_point(field_set:utils.visualization.proto_visualizer.Coordinates.internal_cordinates)
}
inline void proto_visualizer_Coordinates::_internal_add_internal_cordinates(double value) {
  internal_cordinates_.Add(value);
}
inline void proto_visualizer_Coordinates::add_internal_cordinates(double value) {
  _internal_add_internal_cordinates(value);
  // @@protoc_insertion_point(field_add:utils.visualization.proto_visualizer.Coordinates.internal_cordinates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
proto_visualizer_Coordinates::_internal_internal_cordinates() const {
  return internal_cordinates_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
proto_visualizer_Coordinates::internal_cordinates() const {
  // @@protoc_insertion_point(field_list:utils.visualization.proto_visualizer.Coordinates.internal_cordinates)
  return _internal_internal_cordinates();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
proto_visualizer_Coordinates::_internal_mutable_internal_cordinates() {
  return &internal_cordinates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
proto_visualizer_Coordinates::mutable_internal_cordinates() {
  // @@protoc_insertion_point(field_mutable_list:utils.visualization.proto_visualizer.Coordinates.internal_cordinates)
  return _internal_mutable_internal_cordinates();
}

// -------------------------------------------------------------------

// proto_visualizer_Geometry

// repeated .utils.visualization.proto_visualizer.Coordinates coordinates = 1;
inline int proto_visualizer_Geometry::_internal_coordinates_size() const {
  return coordinates_.size();
}
inline int proto_visualizer_Geometry::coordinates_size() const {
  return _internal_coordinates_size();
}
inline void proto_visualizer_Geometry::clear_coordinates() {
  coordinates_.Clear();
}
inline ::utils::visualization::proto_visualizer_Coordinates* proto_visualizer_Geometry::mutable_coordinates(int index) {
  // @@protoc_insertion_point(field_mutable:utils.visualization.proto_visualizer.Geometry.coordinates)
  return coordinates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::utils::visualization::proto_visualizer_Coordinates >*
proto_visualizer_Geometry::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable_list:utils.visualization.proto_visualizer.Geometry.coordinates)
  return &coordinates_;
}
inline const ::utils::visualization::proto_visualizer_Coordinates& proto_visualizer_Geometry::_internal_coordinates(int index) const {
  return coordinates_.Get(index);
}
inline const ::utils::visualization::proto_visualizer_Coordinates& proto_visualizer_Geometry::coordinates(int index) const {
  // @@protoc_insertion_point(field_get:utils.visualization.proto_visualizer.Geometry.coordinates)
  return _internal_coordinates(index);
}
inline ::utils::visualization::proto_visualizer_Coordinates* proto_visualizer_Geometry::_internal_add_coordinates() {
  return coordinates_.Add();
}
inline ::utils::visualization::proto_visualizer_Coordinates* proto_visualizer_Geometry::add_coordinates() {
  ::utils::visualization::proto_visualizer_Coordinates* _add = _internal_add_coordinates();
  // @@protoc_insertion_point(field_add:utils.visualization.proto_visualizer.Geometry.coordinates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::utils::visualization::proto_visualizer_Coordinates >&
proto_visualizer_Geometry::coordinates() const {
  // @@protoc_insertion_point(field_list:utils.visualization.proto_visualizer.Geometry.coordinates)
  return coordinates_;
}

// string type = 2;
inline void proto_visualizer_Geometry::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& proto_visualizer_Geometry::type() const {
  // @@protoc_insertion_point(field_get:utils.visualization.proto_visualizer.Geometry.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void proto_visualizer_Geometry::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:utils.visualization.proto_visualizer.Geometry.type)
}
inline std::string* proto_visualizer_Geometry::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:utils.visualization.proto_visualizer.Geometry.type)
  return _s;
}
inline const std::string& proto_visualizer_Geometry::_internal_type() const {
  return type_.Get();
}
inline void proto_visualizer_Geometry::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* proto_visualizer_Geometry::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* proto_visualizer_Geometry::release_type() {
  // @@protoc_insertion_point(field_release:utils.visualization.proto_visualizer.Geometry.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void proto_visualizer_Geometry::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:utils.visualization.proto_visualizer.Geometry.type)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// proto_visualizer_Features

// .utils.visualization.proto_visualizer.Geometry geometry = 1;
inline bool proto_visualizer_Features::_internal_has_geometry() const {
  return this != internal_default_instance() && geometry_ != nullptr;
}
inline bool proto_visualizer_Features::has_geometry() const {
  return _internal_has_geometry();
}
inline void proto_visualizer_Features::clear_geometry() {
  if (GetArenaForAllocation() == nullptr && geometry_ != nullptr) {
    delete geometry_;
  }
  geometry_ = nullptr;
}
inline const ::utils::visualization::proto_visualizer_Geometry& proto_visualizer_Features::_internal_geometry() const {
  const ::utils::visualization::proto_visualizer_Geometry* p = geometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::utils::visualization::proto_visualizer_Geometry&>(
      ::utils::visualization::_proto_visualizer_Geometry_default_instance_);
}
inline const ::utils::visualization::proto_visualizer_Geometry& proto_visualizer_Features::geometry() const {
  // @@protoc_insertion_point(field_get:utils.visualization.proto_visualizer.Features.geometry)
  return _internal_geometry();
}
inline void proto_visualizer_Features::unsafe_arena_set_allocated_geometry(
    ::utils::visualization::proto_visualizer_Geometry* geometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geometry_);
  }
  geometry_ = geometry;
  if (geometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:utils.visualization.proto_visualizer.Features.geometry)
}
inline ::utils::visualization::proto_visualizer_Geometry* proto_visualizer_Features::release_geometry() {
  
  ::utils::visualization::proto_visualizer_Geometry* temp = geometry_;
  geometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::utils::visualization::proto_visualizer_Geometry* proto_visualizer_Features::unsafe_arena_release_geometry() {
  // @@protoc_insertion_point(field_release:utils.visualization.proto_visualizer.Features.geometry)
  
  ::utils::visualization::proto_visualizer_Geometry* temp = geometry_;
  geometry_ = nullptr;
  return temp;
}
inline ::utils::visualization::proto_visualizer_Geometry* proto_visualizer_Features::_internal_mutable_geometry() {
  
  if (geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::utils::visualization::proto_visualizer_Geometry>(GetArenaForAllocation());
    geometry_ = p;
  }
  return geometry_;
}
inline ::utils::visualization::proto_visualizer_Geometry* proto_visualizer_Features::mutable_geometry() {
  ::utils::visualization::proto_visualizer_Geometry* _msg = _internal_mutable_geometry();
  // @@protoc_insertion_point(field_mutable:utils.visualization.proto_visualizer.Features.geometry)
  return _msg;
}
inline void proto_visualizer_Features::set_allocated_geometry(::utils::visualization::proto_visualizer_Geometry* geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete geometry_;
  }
  if (geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::utils::visualization::proto_visualizer_Geometry>::GetOwningArena(geometry);
    if (message_arena != submessage_arena) {
      geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometry, submessage_arena);
    }
    
  } else {
    
  }
  geometry_ = geometry;
  // @@protoc_insertion_point(field_set_allocated:utils.visualization.proto_visualizer.Features.geometry)
}

// string type = 2;
inline void proto_visualizer_Features::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& proto_visualizer_Features::type() const {
  // @@protoc_insertion_point(field_get:utils.visualization.proto_visualizer.Features.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void proto_visualizer_Features::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:utils.visualization.proto_visualizer.Features.type)
}
inline std::string* proto_visualizer_Features::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:utils.visualization.proto_visualizer.Features.type)
  return _s;
}
inline const std::string& proto_visualizer_Features::_internal_type() const {
  return type_.Get();
}
inline void proto_visualizer_Features::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* proto_visualizer_Features::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* proto_visualizer_Features::release_type() {
  // @@protoc_insertion_point(field_release:utils.visualization.proto_visualizer.Features.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void proto_visualizer_Features::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:utils.visualization.proto_visualizer.Features.type)
}

// map<string, string> properties = 3;
inline int proto_visualizer_Features::_internal_properties_size() const {
  return properties_.size();
}
inline int proto_visualizer_Features::properties_size() const {
  return _internal_properties_size();
}
inline void proto_visualizer_Features::clear_properties() {
  properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
proto_visualizer_Features::_internal_properties() const {
  return properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
proto_visualizer_Features::properties() const {
  // @@protoc_insertion_point(field_map:utils.visualization.proto_visualizer.Features.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
proto_visualizer_Features::_internal_mutable_properties() {
  return properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
proto_visualizer_Features::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:utils.visualization.proto_visualizer.Features.properties)
  return _internal_mutable_properties();
}

// -------------------------------------------------------------------

// proto_visualizer

// string type = 1;
inline void proto_visualizer::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& proto_visualizer::type() const {
  // @@protoc_insertion_point(field_get:utils.visualization.proto_visualizer.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void proto_visualizer::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:utils.visualization.proto_visualizer.type)
}
inline std::string* proto_visualizer::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:utils.visualization.proto_visualizer.type)
  return _s;
}
inline const std::string& proto_visualizer::_internal_type() const {
  return type_.Get();
}
inline void proto_visualizer::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* proto_visualizer::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* proto_visualizer::release_type() {
  // @@protoc_insertion_point(field_release:utils.visualization.proto_visualizer.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void proto_visualizer::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:utils.visualization.proto_visualizer.type)
}

// repeated .utils.visualization.proto_visualizer.Features features = 2;
inline int proto_visualizer::_internal_features_size() const {
  return features_.size();
}
inline int proto_visualizer::features_size() const {
  return _internal_features_size();
}
inline void proto_visualizer::clear_features() {
  features_.Clear();
}
inline ::utils::visualization::proto_visualizer_Features* proto_visualizer::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:utils.visualization.proto_visualizer.features)
  return features_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::utils::visualization::proto_visualizer_Features >*
proto_visualizer::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:utils.visualization.proto_visualizer.features)
  return &features_;
}
inline const ::utils::visualization::proto_visualizer_Features& proto_visualizer::_internal_features(int index) const {
  return features_.Get(index);
}
inline const ::utils::visualization::proto_visualizer_Features& proto_visualizer::features(int index) const {
  // @@protoc_insertion_point(field_get:utils.visualization.proto_visualizer.features)
  return _internal_features(index);
}
inline ::utils::visualization::proto_visualizer_Features* proto_visualizer::_internal_add_features() {
  return features_.Add();
}
inline ::utils::visualization::proto_visualizer_Features* proto_visualizer::add_features() {
  ::utils::visualization::proto_visualizer_Features* _add = _internal_add_features();
  // @@protoc_insertion_point(field_add:utils.visualization.proto_visualizer.features)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::utils::visualization::proto_visualizer_Features >&
proto_visualizer::features() const {
  // @@protoc_insertion_point(field_list:utils.visualization.proto_visualizer.features)
  return features_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace visualization
}  // namespace utils

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_visualization_2eproto
